"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendMessageToContentScript = void 0;
/**
 * Sends a message from the current window to the content script.
 *
 * @param msg The message to send.
 * @returns A Promise that resolves with the response from the content script.
 * @throws An error if GemWallet is not connected and the message type is not a connection request.
 */
var sendMessageToContentScript = function (msg) {
    /*
      In the case of multiple calls coming in sequentially, we use this MESSAGE_ID to make sure we're responding to
      the appropriate message sender. Otherwise, we can run into race conditions where we simply resolve all
      sent messages with the first thing that comes back.
    */
    var messageId = Date.now() + Math.random();
    window.postMessage(__assign({ source: 'GEM_WALLET_MSG_REQUEST', messageId: messageId }, msg), window.location.origin);
    return new Promise(function (resolve, reject) {
        if (!window.gemWallet && msg.type !== 'REQUEST_IS_INSTALLED/V3') {
            reject(new Error('Please check if GemWallet is installed - GemWallet needs to be installed: https://gemwallet.app'));
        }
        var messageListener = function (event) {
            var _a, _b;
            // We only accept messages from ourselves
            if (event.source !== window)
                return;
            // Only respond to messages tagged as being from our content script
            if (((_a = event === null || event === void 0 ? void 0 : event.data) === null || _a === void 0 ? void 0 : _a.source) !== 'GEM_WALLET_MSG_RESPONSE')
                return;
            // Only respond to messages that this instance of sendMessageToContentScript sent
            if (((_b = event === null || event === void 0 ? void 0 : event.data) === null || _b === void 0 ? void 0 : _b.messagedId) !== messageId)
                return;
            resolve(event.data);
            window.removeEventListener('message', messageListener);
        };
        window.addEventListener('message', messageListener, false);
    });
};
exports.sendMessageToContentScript = sendMessageToContentScript;
