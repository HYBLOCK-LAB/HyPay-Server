"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetworkByNetworkID = exports.getNetwork = exports.getDefaultNetwork = exports.NETWORK = exports.FAUCET_XAHAU_TESTNET = exports.XAHAU_TESTNET_NODES = exports.XAHAU_MAINNET_NODES = exports.DEVNET_NODES = exports.TESTNET_NODES = exports.MAINNET_NODES = exports.MAINNET_CLIO_NODES = exports.XahauNetwork = exports.XRPLNetwork = exports.Chain = void 0;
var Chain;
(function (Chain) {
    Chain["XRPL"] = "XRPL";
    Chain["XAHAU"] = "XAHAU";
})(Chain || (exports.Chain = Chain = {}));
var XRPLNetwork;
(function (XRPLNetwork) {
    XRPLNetwork["MAINNET"] = "Mainnet";
    XRPLNetwork["TESTNET"] = "Testnet";
    XRPLNetwork["DEVNET"] = "Devnet";
    XRPLNetwork["CUSTOM"] = "Custom";
})(XRPLNetwork || (exports.XRPLNetwork = XRPLNetwork = {}));
var XahauNetwork;
(function (XahauNetwork) {
    XahauNetwork["XAHAU_MAINNET"] = "Mainnet";
    XahauNetwork["XAHAU_TESTNET"] = "Testnet";
    XahauNetwork["CUSTOM"] = "Custom";
})(XahauNetwork || (exports.XahauNetwork = XahauNetwork = {}));
// XRPL
exports.MAINNET_CLIO_NODES = ['wss://s1.ripple.com', 'wss://s2.ripple.com'];
exports.MAINNET_NODES = __spreadArray(['wss://xrplcluster.com'], exports.MAINNET_CLIO_NODES, true);
exports.TESTNET_NODES = ['wss://s.altnet.rippletest.net:51233', 'wss://testnet.xrpl-labs.com'];
exports.DEVNET_NODES = ['wss://s.devnet.rippletest.net:51233'];
// Xahau
exports.XAHAU_MAINNET_NODES = ['wss://xahau.network'];
exports.XAHAU_TESTNET_NODES = ['wss://xahau-test.net'];
// Faucets
exports.FAUCET_XAHAU_TESTNET = 'https://xahau-test.net/accounts';
exports.NETWORK = (_a = {},
    _a[Chain.XRPL] = (_b = {},
        _b[XRPLNetwork.MAINNET] = {
            chain: Chain.XRPL,
            name: XRPLNetwork.MAINNET,
            server: exports.MAINNET_NODES[0],
            nodes: exports.MAINNET_NODES,
            description: 'Main network using the production version of the XRP Ledger.',
            networkID: 0
        },
        _b[XRPLNetwork.TESTNET] = {
            chain: Chain.XRPL,
            name: XRPLNetwork.TESTNET,
            server: exports.TESTNET_NODES[0],
            nodes: exports.TESTNET_NODES,
            description: 'Acts as a testing network, without impacting production users and risking real money.',
            networkID: 1
        },
        _b[XRPLNetwork.DEVNET] = {
            chain: Chain.XRPL,
            name: XRPLNetwork.DEVNET,
            server: exports.DEVNET_NODES[0],
            nodes: exports.DEVNET_NODES,
            description: 'A preview of upcoming features, where unstable changes are tested out.'
        },
        _b[XRPLNetwork.CUSTOM] = {
            chain: Chain.XRPL,
            name: XRPLNetwork.CUSTOM,
            server: '',
            description: 'Custom network configuration provided by the user.'
        },
        _b),
    _a[Chain.XAHAU] = (_c = {},
        _c[XahauNetwork.XAHAU_MAINNET] = {
            chain: Chain.XAHAU,
            name: XahauNetwork.XAHAU_MAINNET,
            server: exports.XAHAU_MAINNET_NODES[0],
            nodes: exports.XAHAU_MAINNET_NODES,
            description: 'Mainnet for the Xahau blockchain.',
            networkID: 21337
        },
        _c[XahauNetwork.XAHAU_TESTNET] = {
            chain: Chain.XAHAU,
            name: XahauNetwork.XAHAU_TESTNET,
            server: exports.XAHAU_TESTNET_NODES[0],
            nodes: exports.XAHAU_TESTNET_NODES,
            description: 'Testnet for the Xahau blockchain.',
            networkID: 21338
        },
        _c[XahauNetwork.CUSTOM] = {
            chain: Chain.XAHAU,
            name: XahauNetwork.CUSTOM,
            server: '',
            description: 'Custom network configuration provided by the user.'
        },
        _c),
    _a);
var getDefaultNetwork = function (chain) {
    switch (chain) {
        case Chain.XAHAU:
            return XahauNetwork.XAHAU_MAINNET;
        default:
            return XRPLNetwork.MAINNET;
    }
};
exports.getDefaultNetwork = getDefaultNetwork;
function getNetwork(chain, network) {
    if (chain === Chain.XRPL && Object.values(XRPLNetwork).includes(network)) {
        return exports.NETWORK[chain][network];
    }
    if (chain === Chain.XAHAU && Object.values(XahauNetwork).includes(network)) {
        return exports.NETWORK[chain][network];
    }
    throw new Error("Network ".concat(network, " is not valid for chain ").concat(chain));
}
exports.getNetwork = getNetwork;
var getNetworkByNetworkID = function (networkID) {
    // Hardcoded for performance reasons
    switch (networkID) {
        case 0:
            return exports.NETWORK[Chain.XRPL][XRPLNetwork.MAINNET];
        case 1:
            return exports.NETWORK[Chain.XRPL][XRPLNetwork.TESTNET];
        case 21337:
            return exports.NETWORK[Chain.XAHAU][XahauNetwork.XAHAU_MAINNET];
        case 21338:
            return exports.NETWORK[Chain.XAHAU][XahauNetwork.XAHAU_TESTNET];
        default:
            throw new Error("Network ID ".concat(networkID, " is not valid"));
    }
};
exports.getNetworkByNetworkID = getNetworkByNetworkID;
